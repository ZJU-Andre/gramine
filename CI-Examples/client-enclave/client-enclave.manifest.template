loader.log_level = "debug" # Changed to debug for more verbose output during testing
libos.entrypoint = "/gramine/CI-Examples/client-enclave/bin/client_app"

sys.stack.size = "2M" # Keep as is, can be tuned

sgx.enclave_size = "512M" # Client enclave might not need as much as shared_enclave
sgx.max_threads = 8    # Can be adjusted based on client's parallelism

# Client enclave does not need direct access to GPU devices if it uses the shared_service.
# If it had other reasons to access devices, they would be listed here.
sgx.allowed_files = [
  # Example: "dev:/dev/sgx_prv", # if using client-side attestation or sealing features directly
]

fs.mounts = [
  # Mount for untrusted shared memory, if client needs to use it directly for other purposes.
  # For the vector_add example, data is passed via IPC, so this is not strictly required by it.
  { path = "/untrusted_region", type = "untrusted_shm", uri = "file:/gramine/untrusted_shm/shared_region" },
]

sgx.trusted_files = [
  "file:/gramine/CI-Examples/client-enclave/bin/client_app", # Adjusted path
  # Client does not need CUDA libraries if all CUDA operations are delegated to the shared enclave.
  # Standard C libraries and pthreads are typically provided by Gramine or must also be trusted if from host.
  "file:/lib/x86_64-linux-gnu/libpthread.so.0", # Example, if not using Gramine's built-in
  "file:/lib/x86_64-linux-gnu/libdl.so.2",
  # "file:/usr/lib/x86_64-linux-gnu/libstdc++.so.6", # If client uses C++ features not in base
]
